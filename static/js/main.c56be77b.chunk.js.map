{"version":3,"sources":["components/EmogiButton/EmojiButton.tsx","components/EmojiBox/EmojiTab.tsx","components/EmojiBoxContent/EmojiBoxContent.tsx","components/EmojiBox/EmojiBox.tsx","App.tsx","index.tsx"],"names":["EmojiButton","onClick","className","role","title","width","height","fill","xlinkHref","EmojiTab","activeTab","tabName","onTabChange","EmojiBoxContent","sections","addEmoji","onSelectEmoji","length","map","section","items","emoji","index","e","event","onAddEmoji","tabs","EmojiBox","useState","setActiveTab","recentEmojiMap","setRecentEmojiMap","recentEmojiArray","setRecentEmojiArray","smile","recent","tabContent","setTabContent","useEffect","newRecent","Object","entries","sort","a","b","entry","prev","JSON","parse","localStorage","getItem","copyRecentEmojiMap","setItem","stringify","tab","App","textAreaRef","useRef","text","setText","isEmojiBoxOpened","setEmojiBoxOpened","document","addEventListener","onTabKeyPress","removeEventListener","code","tabIndex","ref","rows","wrap","placeholder","onChange","target","value","CSSTransition","in","timeout","classNames","unmountOnExit","element","current","before","slice","selectionStart","native","after","newText","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c56be77b.chunk.js","sourcesContent":["interface EmojiButtonProps {\n  onClick: () => void;\n}\n\nexport const EmojiButton: React.FC<EmojiButtonProps> = ({ onClick }) => {\n  return (\n    <div className=\"input__icon\" role=\"button\" onClick={onClick} title=\"Нажмите TAB, чтобы быстро открыть выбор emoji\">\n      <svg width=\"20\" height=\"20\" fill=\"none\">\n        <use xlinkHref=\"#emoji-smile\" />\n      </svg>\n    </div>\n  );\n};\n","interface EmojiTabProps {\n  activeTab: string;\n  tabName: string;\n  onTabChange: () => void;\n}\n\nexport const EmojiTab: React.FC<EmojiTabProps> = ({ activeTab, tabName, onTabChange }) => {\n  return (\n    <div className={`emoji-box__tab ${activeTab === tabName ? 'emoji-box__tab--active' : ''}`} onClick={onTabChange}>\n      <svg width=\"20\" height=\"20\" fill=\"none\">\n        <use xlinkHref={`#emoji-${tabName}`} />\n      </svg>\n    </div>\n  );\n};\n","import './EmojiBoxContent.css';\r\n\r\ninterface EmojiSection {\r\n  title: string;\r\n  items: string[];\r\n}\r\n\r\ninterface EmojiBoxContentProps {\r\n  sections: EmojiSection[];\r\n  addEmoji: (emoji: string) => void;\r\n  onSelectEmoji: (emoji: string) => void;\r\n}\r\n\r\nexport const EmojiBoxContent: React.FC<EmojiBoxContentProps> = ({ sections, addEmoji, onSelectEmoji }) => {\r\n\r\n  const onAddEmoji = (event: any, emoji: string) => {\r\n    addEmoji(emoji);\r\n    onSelectEmoji(emoji);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {sections.length && sections.map(section => <div className=\"emoji-section\" key={section.title}>\r\n        <div className=\"emoji-section__title\">{section.title}</div>\r\n        <div className=\"emoji-section__items\">\r\n          {section?.items?.length ? section.items.map((emoji, index) => <div className=\"emoji-section__item\"\r\n                                                                             onClick={(e) => onAddEmoji(e, emoji)}\r\n                                                                             key={index}>{emoji}</div>) : ''}\r\n        </div>\r\n      </div>)}\r\n    </>\r\n  );\r\n};\r\n","import './EmogiBox.css';\nimport { useEffect, useState } from 'react';\nimport { EmojiTab } from './EmojiTab';\nimport { EmojiBoxContent } from '../EmojiBoxContent/EmojiBoxContent';\nimport sections from '../../assets/sections.json';\n\nconst tabs = ['smile', 'recent'];\nconst NUMBER_OF_RECENT = 25;\n\nexport const EmojiBox = ({onSelectEmoji} : any) => {\n    const [activeTab, setActiveTab] = useState<string>(tabs[0]);\n\n    const [recentEmojiMap, setRecentEmojiMap] = useState<Record<string, string>>({});\n    const [recentEmojiArray, setRecentEmojiArray] = useState<string[]>([]);\n    const [tabContent, setTabContent] = useState<any>({ smile: sections, recent: [] });\n\n    useEffect(() => {\n      const sortByFrequency = (map: Record<string, string>): string[] => Object\n        .entries(map)\n        .sort((a: any, b: any) => b[1] - a[1])\n        .map((entry) => entry[0]);\n\n      const newRecent = sortByFrequency(recentEmojiMap);\n      setRecentEmojiArray(newRecent);\n      setTabContent((prev: any) => ({ ...prev, recent: [{ title: 'Часто используемые', items: newRecent }] }));\n    }, [recentEmojiMap]);\n\n    const onTabChange = (tab: string) => {\n      setActiveTab(tab);\n    };\n\n    const addEmoji = (emoji: string) => {\n      const copyRecentEmojiMap: any = recentEmojiMap;\n      if (copyRecentEmojiMap && copyRecentEmojiMap[emoji]) {\n        copyRecentEmojiMap[emoji]++;\n      } else {\n        const recent = recentEmojiArray;\n        if (recent.length > NUMBER_OF_RECENT) {\n          delete copyRecentEmojiMap[recent[recent.length - 1]];\n        }\n        copyRecentEmojiMap[emoji] = 1;\n      }\n\n      setRecentEmojiMap({ ...copyRecentEmojiMap });\n      localStorage.setItem('recentEmoji', JSON.stringify(copyRecentEmojiMap));\n    };\n\n    useEffect(() => {\n      const recent = JSON.parse(localStorage.getItem('recentEmoji') || '{}');\n      setRecentEmojiMap(recent);\n    }, []);\n\n    return (\n      <div className=\"emoji-box\">\n        <div className=\"ui-scroll\">\n          <div className=\"ui-scroll__viewport\">\n            <EmojiBoxContent sections={tabContent[activeTab]} addEmoji={addEmoji} onSelectEmoji={onSelectEmoji} />\n          </div>\n        </div>\n        <div className=\"emoji-box__tabs\">\n          {tabs.map(tab => (\n            <EmojiTab activeTab={activeTab} key={tab} tabName={tab} onTabChange={() => onTabChange(tab)} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n;\n","import { useEffect, useRef, useState } from 'react';\nimport { EmojiButton } from './components/EmogiButton/EmojiButton';\nimport { EmojiBox } from './components/EmojiBox/EmojiBox';\nimport { CSSTransition } from 'react-transition-group';\nimport { log } from 'util';\n\nexport const App = () => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const [text, setText] = useState<string>('');\n  const [isEmojiBoxOpened, setEmojiBoxOpened] = useState<boolean>(false);\n\n  useEffect(() => {\n    document.addEventListener('keydown', onTabKeyPress);\n\n    return () => {\n      document.removeEventListener('keydown', onTabKeyPress);\n    };\n  }, []);\n\n  const onTabKeyPress = (event: KeyboardEvent) => {\n    if (event.code === \"Tab\") {\n      setEmojiBoxOpened(true);\n    }\n  };\n\n\n  const handleChange = (event: any) => {\n    setText(event.target.value);\n  };\n\n  const onSelectEmoji = (emoji: string): void => {\n    const element = textAreaRef.current;\n\n    if (!element) return;\n\n    const before = text.slice(0, element.selectionStart);\n    const native = emoji;\n    const after = text.slice(element.selectionStart);\n\n    const newText = `${before}${native}${after}`;\n\n    setText(newText);\n    // setTextAreaCursor(before.length + native.length);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"input\">\n        <textarea\n          tabIndex={-1}\n          ref={textAreaRef}\n          className=\"input__field\"\n          rows={1}\n          wrap=\"hard\"\n          placeholder=\"Ваше сообщение\"\n          // role=\"textbox\"\n          // aria-multiline=\"true\"\n          // contentEditable=\"true\"\n          // suppressContentEditableWarning={true}\n          onChange={handleChange}\n          value={text}\n        >\n        </textarea>\n        <EmojiButton onClick={() => setEmojiBoxOpened(!isEmojiBoxOpened)} />\n        <CSSTransition in={isEmojiBoxOpened} timeout={200} classNames=\"emoji-box\" unmountOnExit>\n          <EmojiBox onSelectEmoji={onSelectEmoji} />\n        </CSSTransition>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}